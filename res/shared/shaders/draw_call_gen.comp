#version 450

#include "forward.glsl"

layout (constant_id = 0) const uint ENABLE_DYNAMIC_LOD = 1u;
layout (constant_id = 1) const uint ENABLE_FRUSTUM_CULL = 1u;
layout (constant_id = 2) const int WARP_SIZE = 32;

layout(local_size_x_id = 2) in;

layout(push_constant) uniform PushConstant {
    uint object_count_pre_cull;
    float global_lod_bias;
    float global_cull_dist_multiplier;
};

layout(set = 0, binding = 0) readonly buffer MeshBuffer {
    Mesh meshes[];
};
layout(set = 0, binding = 1) readonly buffer MeshInstanceBuffer {
    MeshInstance mesh_instances[];
};
layout(set = 0, binding = 2) readonly buffer PrimitiveBuffer {
    Primitive primitives[];
};
layout(set = 0, binding = 3) readonly buffer ObjectBuffer {
    Object objects[];
};
layout(set = 0, binding = 4) readonly buffer GlobalTransformBuffer {
    Transform global_transforms[];
};
layout(set = 0, binding = 5) writeonly buffer DrawCommandBuffer {
    DrawCommand draw_commands[];
};
layout(set = 0, binding = 6) buffer DrawCommandCountBuffer {
    uint draw_command_count;
};
layout(set = 0, binding = 7) uniform CameraBuffer {
    Camera camera;
};

void main() {
    uint object_id = gl_GlobalInvocationID.x;
    if (object_id >= object_count_pre_cull) {
        return;
    }

    Object object = objects[object_id];
    if (object.visible == 0u) {
        return;
    }

    Mesh mesh = meshes[mesh_instances[object.mesh_instance].mesh];
    Transform transform = global_transforms[object_id];

    bool should_draw = true;

    vec3 mesh_position = rotate_vq(mesh.center_offset * transform.scale, transform.rotation) + transform.position;
    // Distance to camera plane is cheaper than euclidean distance
    float mesh_dist = dot(mesh_position - camera.position, camera.forward);
    float cull_distance = 4000.0f * global_cull_dist_multiplier;

    // Frustum Culling
    if (ENABLE_FRUSTUM_CULL != 0u) {
        vec3 mesh_pos_camera_diff = mesh_position - camera.position;
        float mesh_radius = mesh.radius * transform.max_scale;

        should_draw = should_draw && (mesh_dist <= cull_distance);
        should_draw = should_draw && (dot(camera.right_plane, mesh_pos_camera_diff) > -mesh_radius);
        should_draw = should_draw && (dot(camera.left_plane, mesh_pos_camera_diff) > -mesh_radius);
        should_draw = should_draw && (dot(camera.bottom_plane, mesh_pos_camera_diff) > -mesh_radius);
        should_draw = should_draw && (dot(camera.top_plane, mesh_pos_camera_diff) > -mesh_radius);
    }

    // TODO: Re-implement
    // LOD Picking
    // https://www.desmos.com/calculator/igswt6rlwt
    //float lod_f;
    //if (ENABLE_DYNAMIC_LOD != 0u) {
    //    lod_f = max(max(log2((1 << LOD_COUNT) * (mesh_dist / cull_distance) + (mesh_dist / LOD_DIV_CONSTANT)), 0.0) + global_lod_bias + mesh.lod_bias, 0.0);
    //} else {
    //    lod_f = max(global_lod_bias, 0.0);
    //}
    //uint lod_id = min(uint(lod_f), LOD_COUNT - 1u);
    uint lod_id = 0u;

    if (should_draw) {
        for (uint i = 0u; i < mesh.primitive_count; ++i) {
            PrimitiveLOD lod = primitives[mesh.primitive_start + i].lods[lod_id];

            DrawCommand cmd;
            cmd.index_count = lod.index_count;
            cmd.instance_count = 1u;
            cmd.first_index = lod.index_start;
            cmd.vertex_offset = lod.vertex_start;
            cmd.first_instance = 0u;
            cmd.object_id = object_id;
            cmd.primitive_id = i;

            uint current_command_id = atomicAdd(draw_command_count, 1u);
            draw_commands[current_command_id] = cmd;
        }
    }
}