#version 450

#include "forward.glsl"

layout (constant_id = 0) const uint ENABLE_DYNAMIC_LOD = 1u;
layout (constant_id = 1) const uint ENABLE_FRUSTUM_CULL = 1u;
layout (constant_id = 2) const int WARP_SIZE = 32;

layout(local_size_x_id = 2) in;

layout(push_constant) uniform PushConstant {
    uint draw_count_pre_cull;
    float global_lod_bias;
    float global_cull_dist_multiplier;
};

layout(set = 0, binding = 0) readonly buffer MeshBuffer {
    Mesh meshes[];
};
layout(set = 0, binding = 1) readonly buffer ObjectBuffer {
    Object objects[];
};
layout(set = 0, binding = 2) writeonly buffer DrawCommandBuffer {
    DrawCommand draw_commands[];
};
layout(set = 0, binding = 3) buffer DrawCommandCountBuffer {
    uint draw_command_count;
};
layout(set = 0, binding = 4) writeonly buffer DrawCommandIndexBuffer {
    uint draw_command_indices[];
};
layout(set = 0, binding = 5) uniform CameraBuffer {
    Camera camera;
};

void main() {
    uint object_id = gl_GlobalInvocationID.x;

    if (object_id >= draw_count_pre_cull) {
        return;
    }

    Object object = objects[object_id];

    if (object.visible == 0u) {
        return;
    }

    Mesh mesh = meshes[object.mesh];

    vec3 mesh_position = rotateVQ(mesh.center_offset, object.rotation) * object.scale + object.position;
    // Distance to camera plane is cheaper than euclidean distance
    float mesh_dist = dot(mesh_position - camera.position, camera.forward);
    float cull_distance = mesh.cull_distance * global_cull_dist_multiplier;

    // Frustum Culling
    if (ENABLE_FRUSTUM_CULL != 0u) {
        vec3 mesh_pos_camera_diff = mesh_position - camera.position;
        float mesh_radius = mesh.radius * object.max_scale;

        bool in_frustum = true;
        in_frustum = in_frustum && (mesh_dist <= cull_distance);
        in_frustum = in_frustum && (dot(camera.right_plane, mesh_pos_camera_diff) > -mesh_radius);
        in_frustum = in_frustum && (dot(camera.left_plane, mesh_pos_camera_diff) > -mesh_radius);
        in_frustum = in_frustum && (dot(camera.bottom_plane, mesh_pos_camera_diff) > -mesh_radius);
        in_frustum = in_frustum && (dot(camera.top_plane, mesh_pos_camera_diff) > -mesh_radius);
        if(!in_frustum) {
            return;
        }
    }

    // LOD Picking
    // https://www.desmos.com/calculator/igswt6rlwt
    float lod_f;
    if (ENABLE_DYNAMIC_LOD != 0u) {
        lod_f = max(max(log2((1 << mesh.lod_count) * (mesh_dist / cull_distance) + (mesh_dist / LOD_DIV_CONSTANT)), 0.0) + global_lod_bias + mesh.lod_bias, 0.0);
    } else {
        lod_f = max(global_lod_bias + mesh.lod_bias, 0.0);
    }
    uint lod_id = min(uint(lod_f), mesh.lod_count - 1u);

    MeshLOD lod = mesh.lods[lod_id];

    uint current_command_id = atomicAdd(draw_command_count, 1u);

    draw_command_indices[current_command_id] = object_id;

    draw_commands[current_command_id].index_count = lod.index_count;
    draw_commands[current_command_id].instance_count = 1u;
    draw_commands[current_command_id].first_index = lod.first_index;
    draw_commands[current_command_id].vertex_offset = lod.vertex_offset;
    draw_commands[current_command_id].first_instance = 0u;
}